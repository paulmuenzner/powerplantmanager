package models

import (
	"strings"
	"time"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"gopkg.in/go-playground/validator.v9"
)

// More parameters can be added as per needs
// In some cases it can make sense to break up the structure into more models/collections
type PhotovoltaicPlant struct {
	ID             primitive.ObjectID `bson:"_id,omitempty"`          // Same _id as in PlantLoggerConfig
	User           primitive.ObjectID `bson:"user_id" unique:"false"` // _id of user who generated this data entry and owns plant responsibility
	PublicPlantID  string             `bson:"public_plant_id" json:"public_plant_id" validate:"required" unique:"true"`
	MountingSystem string             `bson:"mounting_system,omitempty" json:"mounting_system" validate:"max=1000,omitempty" required:"false" unique:"false"` // fixed-tilt systems, single-axis trackers, and dual-axis trackers
	Name           string             `bson:"name" json:"name" validate:"max=200,required" unique:"true"`                                                     // Name of the plant
	Warranty       string             `bson:"warranty" json:"warranty" validate:"max=10000" unique:"false"`                                                   // Informational. The warranties provided by the manufacturers and the expected lifespan of the PV panels and other system components
	NetMeetering   string             `bson:"net_meetering" json:"net_meetering" validate:"max=2000" unique:"false"`                                          // Informational. The ability to feed excess electricity generated by the PV system back into the grid and receive credits or compensation for it.
	Address        string             `bson:"address" json:"address" validate:"max=400" unique:"false"`                                                       // Address (location) where plant is situated
	Coordinates    Coordinates        `bson:"coordinates" json:"coordinates" unique:"false"`                                                                  // Coordinates of the plant
	GridConnection string             `bson:"grid_connection" json:"grid_connection" validate:"max=100" unique:"false"`                                       // grid-tied, off-grid, or hybrid configurations
	NominalPower   int                `bson:"nominal_power" json:"nominal_power" unique:"false"`                                                              // Nominal power in kWp
	ModuleArea     int                `bson:"module_area" json:"module_area" unique:"false"`                                                                  // Area of modules
	ModulesNumber  int                `bson:"modules_number" json:"modules_number" unique:"false"`                                                            // Number of modules
	CreatedAt      time.Time          `bson:"created_at" json:"created_at" validate:"required"`
}

// Coordinates represents a pair of latitude and longitude.
type Coordinates struct {
	Latitude  float64 `bson:"latitude" json:"latitude" unique:"false"`
	Longitude float64 `bson:"longitude" json:"longitude" unique:"false"`
}

// // Custom validation function for 'mounting_system'
func MountingSystemValidator(fl validator.FieldLevel) bool {
	// Custom validation logic for 'mounting_system'
	value := fl.Field().String()

	// Skip validation if the field is empty
	if value == "" {
		return true
	}

	// Custom validation logic for 'mounting_system'
	validMountingSystems := []string{"fixed-tilt", "single-axis", "dual-axis"}

	for _, system := range validMountingSystems {
		if strings.ToLower(value) == system {
			return true
		}
	}

	return false
}
